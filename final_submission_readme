Group: CHECKPOINT0
Group Member: Di Mu(dimu), Sanjay Paul(sanjayp), Hangfei Lin(hangfei)

What follows below are instructions for interpreting our code and the models we attempted to use.

I. Description of Main Models

All of the major features and models we attempted to use are accessed through the 'models.m' file. 

A. Logistic Regression

The model we decided upon for the purposes of completing the project requirements is trained as follows: choose the 250000 data set(default) and use Logistic Regression (model = train(Y, X, '-s 7 -c 0.06 -e 0.001 -q')) from the liblinear package.

B. Naive Bayes 

For the Naive Bayes model, we used Matlab's Naive Bayes implementation.

C. SVD

The feature space of the training data set is too large, so we first pick the most frequent words by throwing away those that appear less than 100 times. Then we perform a 'fast SVD' (fsvd, included in the folder) and choose the top 500 of the output components.

Other models are trained using different methods (to be discussed in the final report).

II. Instructions

0. Load the data.

1. The training data needs to be selected. There are several flags and a switch case in models.m to help you do this (design chosen to facilitate easy debugging). Furthermore, you can adjust the selection of the training and test data using the data_comb flag (default is 25000 train data, empty test data).

2. You can also add additional features to the training set and these include review length, punctuation info, stemmer info, IDF info, and frequency info. The corresponding flags are as follows:

review_length_flag = 0;
add_punc_flag = 0;
freq_flag = 0;  

3. You can also eliminate some features to increase the accuracy or reduce the data amount to boost the training process. This is also controlled by flags:

porterStemmer_flag = 0;
stemmed_X_flag = 0;
stopwords_process_flag = 0;
stopwords_use_flag = 0;
idf_flag = 0;
SVDs_flag = 1;

4. We also include options for a rescaling process (which proved to be ineffective in practice) that are controlled by:

scale_flag = 0;
standardization_flag = 0;
normalization_flag = 0;

5. Finally, you can select a control flag to choose the models (you can use several models separately).

SVM_flag = 0;
SVM_liblinear_flag = 0;
LG_flag = 0;
NB_flag = 0;
KNN_flag = 0;   % to be implemented
discriminant_flag = 0;
kmeans_flag = 0;

The original code used to support the SVD and NB implementations can be found in the 'unused_model' folder. Each model is made up of two .m files: one init_model file, the other one is prediction_model file. To use the model, run the init_model function, and then run the prediction_model function. The ones included are:

init_model_SVD	prediction_SVD
init_model_nb	prediction_nb


